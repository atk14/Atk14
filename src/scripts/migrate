#!/usr/bin/env php
<?php
/**
 * Do pending migrations
 * 
 * For more help run
 *	$ ./scripts/migrations --help
 */

$arguments = getopt("hpfl",array("help","preview","force","list"));
$script = $argv[0];

if(isset($arguments["h"]) || isset($arguments["help"])){
echo ltrim("
Do pending migrations
Load and process *.sql or *.php files from the migration folder (db/migrations/).

For displaying this help message run
 $ $script -h
 $ $script --help

To process all pending migrations:
 $ $script

To process just specific migrations:
 $ $script 0010_migration.sql 0011_another_migration.sql

Force to process specific migration even when it was already processed:
 $ $script -f 0012_import_sample_data_migration.php
 $ $script --force 0012_import_sample_data_migration.php

To display migrations waiting for processing:
 $ $script -p
 $ $script --preview

To display already executed migrations:
 $ $script -l
 $ $script --list

You can run migrate script in different environments:
 $ ATK14_ENV=development $script -p
 $ ATK14_ENV=production $script -p
 $ ATK14_ENV=test $script -p
                                                                                  
Note: table schema_migrations needs to be created in the database.
  CREATE TABLE schema_migrations(
    version VARCHAR(255) PRIMARY KEY,
    created_at TIMESTAMP NOT NULL DEFAULT NOW()
  );
You can create it by calling
 $ ./scripts/initialize_database
");
exit(0);
}

define("TABLERECORD_CACHES_STRUCTURES",0); // do not read cached structures during migration
require_once(dirname(__FILE__)."/load.php");

// loads application_migration.php
if(file_exists($_f = $ATK14_GLOBAL->getMigrationsPath()."/application_migration.php")){
	require_once($_f);
}

$logger = Atk14Migration::GetLogger();

$previewing = isset($arguments["p"]) || isset($arguments["preview"]);
$listing = isset($arguments["l"]) || isset($arguments["list"]);

if($listing){
	// We need to have records, that have NULLs in created_at, at the beginning of the list.
	// Currently the query has to be compatible with Postgresql and Oracle.
	$rows = $dbmole->selectRows("SELECT version,created_at FROM schema_migrations ORDER BY CASE WHEN created_at IS NULL THEN 1 ELSE 2 END, created_at,version");
	foreach($rows as $row){
		echo substr($row['created_at'],0,19), ' ', $row['version'], "\n";
	}
	exit(0);
}

// read migrations from command line
// $ ./scripts/migrate -p 0009_adding_fileds_to_drafts.sql 0010_altering_constraint.sql
// -> array("0009_adding_fileds_to_drafts.sql","0010_altering_constraint")
$force_to_execute_migrations = array();
if(sizeof($argv)>1){
	$_argv = $argv;
	array_shift($_argv);
	while($_argv){
		$_m = array_pop($_argv);
		if(preg_match('/^-/',$_m)){ break; }
		$force_to_execute_migrations[] = preg_replace('/^.*\/([^\/]+)$/','\1',$_m); // "db/migrations/0012_repositories.sql" -> "0012_repositories.sql"
	}
}

$forcing = (isset($arguments["f"]) || isset($arguments["force"])) && sizeof($force_to_execute_migrations);

$db_type = $dbmole->getDatabaseType(); // "postgresql", "mysql"...

// getting list of migration files
// a migration file must start with a number
$migrations = array();
$dir = opendir($ATK14_GLOBAL->getMigrationsPath());
while($item = readdir($dir)){
	if(preg_match("/^(\d+_.+)\\.(sql|inc|php)$/",$item,$matches)){

		if(preg_match('/\.(postgresql|mysql)\.(sql|inc|php)$/',$item,$matches)){
			if($matches[1]!=$db_type){ continue; } // skipping e.g. 0001_articles.mysql.sql when postgresql is used
		}

		$migrations[] = $item;
	}
}
closedir($dir);
asort($migrations);

$_migrations = array();
foreach($migrations as $m){
	$_m = preg_replace('/\.([^.]+)$/',".$db_type.\\1",$m); // 0001_articles.sql -> 0001_articles.postgresql.sql
	if(in_array($_m,$migrations)){ continue; } // 0001_articles.sql needs to be skipped when there is also 0001_articles.postgresql.sql
	$_migrations[] = $m;
}
$migrations = $_migrations;

foreach($force_to_execute_migrations as $_m){
	if(!in_array($_m,$migrations)){
		echo "There is not migration $_m\n";
		exit(1);
	}
}

// creating schema_migrations table when it doesn't exist
if(!Atk14Migration::SchemaMigrationsTableExists($dbmole)){
	Atk14Migration::CreateSchemaMigrationsTable($dbmole);
}

// getting list of done migrations
#$already_done_migrations = $dbmole->selectIntoArray("SELECT version FROM schema_migrations ORDER BY version");

$counter = 0;
$ret = 0;
foreach($migrations as $m){
	if(
		!$forcing &&
		0!=$dbmole->selectInt("SELECT COUNT(*) FROM schema_migrations WHERE version=:version", array(":version" => $m))
	){ continue; }

	if($force_to_execute_migrations && !in_array($m,$force_to_execute_migrations)){ continue; }

	$counter++;

	if($previewing){
		$logger->info("$m");
		continue;
	}

	// Experimental feature!
	// Trying to isolate every migration.
	if(sizeof($force_to_execute_migrations)!=1){
		$_forcing = $forcing ? " -f" : "";
		$_env = $ATK14_GLOBAL->getEnvironment();
		$_migration = escapeshellarg($m);
		$command = "ATK14_ENV=$_env $script$_forcing $_migration";
		passthru($command,$ret_val);
		if($ret_val!==0){
			exit($ret_val);
		}
		continue;
	}

	$logger->info("about to start migration $m"); $logger->flush();
	
	if(preg_match("/^[0-9]+_(.*?)(\\.(postgresql|mysql)|)\\.(inc|php)$/",$m,$matches)){

		// the next line enforces TableRecord to reread table structures
		TableRecord::FlushTableStructureCache();

		require_once($ATK14_GLOBAL->getMigrationsPath().$m);
		$class_name = preg_replace("/_/","",$matches[1]);
		$migr = new $class_name($m);
	}else{
		// an *.sql file
		$migr = new Atk14MigrationBySqlFile($m);
	}

	if(!$migr->migrateUp()){
		$ret = 1;
		break; // an error occured
	}

	$logger->info("migration $m has been successfully finished"); $logger->flush();
}

if($counter==0 && !$previewing){ $logger->info("there is nothing to migrate"); }

$logger->flush_all();
exit($ret);
