#!/usr/bin/env php
<?php
/**
 * Dumps configuration constants
 *
 * To see help type:
 *
 *  $ ./scripts/dump_settings --help
 */

require_once(dirname(__FILE__)."/load.php");

function _exit_with_error($message){
	$stderr = fopen('php://stderr', 'w');
	fwrite($stderr,"$message\n");
	exit(1);
}

$constants = array_merge(array(
	"DEVELOPMENT" => DEVELOPMENT,
	"PRODUCTION" => PRODUCTION,
	"TEST" => TEST,
),$__CONFIG_CONSTANTS__);

$requested_constants = array();
$json = false;
$help = false;
$ignore_missing = false;

$command = array_shift($argv);
foreach($argv as $a){
	if(preg_match('/^[A-Z]/',$a)){ $requested_constants[] = $a; }
	elseif(preg_match('/^(-j|--json)$/',$a)){ $json = true; }
	elseif(preg_match('/^(-h|--help)$/',$a)){ $help = true; }
	elseif(preg_match('/^(-i|--ignore-missing)$/',$a)){ $ignore_missing = true; }
	else{
		_exit_with_error("Unknown option $a");
	}
}

if($help){
	echo trim("
Usage: ./scripts/dump_settings [-j|--json] [-i|--ignore-missing] [CONSTANT_NAME] [CONSTANT_NAME]...

Dumps configuration constants

To dump all constants just run:

 $ ./scripts/dump_settings

You can retrieve the value of the given constant:

 $ ./scripts/dump_settings ATK14_APPLICATION_NAME

It is also possible to dump list of specific constants:

 $ ./scripts/dump_settings BCC_EMAIL DEFAULT_EMAIL

You can check out how configuration varies in different environments:

 $ ATK14_ENV=PRODUCTION ./scripts/dump_settings
 $ ATK14_ENV=DEVELOPMENT ./scripts/dump_settings
 $ ATK14_ENV=TEST ./scripts/dump_settings

You can dump a constant which may or may not be defined:

 $ ./scripts/dump_settings --ignore-missing NOT_SURE_IF_DEFINED
 $ ./scripts/dump_settings -i NOT_SURE_IF_DEFINED

Exporting data in JSON format:

 $ ./scripts/dump_settings --json
 $ ./scripts/dump_settings -j
 $ ./scripts/dump_settings --json ATK14_APPLICATION_NAME
 $ ./scripts/dump_settings -j ATK14_APPLICATION_NAME

 $ ./scripts/dump_settings -j BCC_EMAIL DEFAULT_EMAIL
 $ ./scripts/dump_settings -j -i BCC_EMAIL DEFAULT_EMAIL NOT_SURE_IF_DEFINED
	"),"\n";
	exit(0);
}

$out = array();

foreach($requested_constants as $rc){
	if(!in_array($rc,array_keys($constants))){
		if(defined($rc)){
			$constants[$rc] = constant($rc);
		}elseif(!$ignore_missing){
			_exit_with_error("There is no constant $rc");
		}else{
			continue;
		}
	}
	$out[$rc] = $constants[$rc];
}

if(!$requested_constants){
	$out = $constants;
}

if($json){

	foreach($out as $k => $v){
		if(is_string($v) && !Translate::CheckEncoding($v,"UTF-8")){
			$v = Translate::Trans($v,DEFAULT_CHARSET,"UTF-8");
			if(!Translate::CheckEncoding($v,"UTF-8")){
				_exit_with_error("Invalid charset in $k=$v");
			}
			$out[$k] = $v;
		}
	}

	echo json_encode($out,JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE), "\n";
	exit(0);
}

foreach($out as &$c){ if(is_bool($c)){ $c = $c ? "true" : "false"; } }

if(sizeof($requested_constants)==1){
	if(sizeof($out)==0){
		exit(0);
	}
	if(sizeof($out)==1){
		$out = array_values($out);
		echo $out[0],"\n";
		exit(0);
	}
}

print_r($out);
