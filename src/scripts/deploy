#!/usr/bin/env php
<?php
/**
 * Provides deployment of the application to production
 *
 * It reads configuration from config/deploy.yml
 *
 * To deploy on the first stage in config/deploy.yml
 *  $ ./scripts/deploy
 *
 * To deploy on the specific stage
 *  $ ./scripts/deploy preview
 */

require_once(dirname(__FILE__)."/load.php");
$cwd = getcwd();
chdir(ATK14_DOCUMENT_ROOT);

$CONFIGS = $ATK14_GLOBAL->getConfig("deploy");
if(!$CONFIGS){
	echo file_exists("./config/deploy.yml") ? "It looks like the file ./config/deploy.yml is corrupted (beware of usage of tabulators)\n" : "It looks like there is no file ./config/deploy.yml\n";
	_exit_with_errors();
}
$STAGES = array_keys($CONFIGS);

$stage = isset($argv[1]) ? $argv[1] : $STAGES[0];

if(!isset($CONFIGS[$stage])){
	echo "sorry, in ./config/deploy.yml I have no information about a stage $stage\n";
	_exit_with_errors();
}
$default_config = $CONFIGS[$STAGES[0]]; // the first stage
$default_config += ($raw_def = array(
	"url" => "http://www.example.com/", // just for information
	"user" => null,
	"server" => null,
	"directory" => null,
	"create_maintenance_file" => "true",
	"deploy_via" => "git_push", // there is only one way
	"deploy_repository" => null,
	"deploy_branch" => "master",
	"before_deploy" => array(),
	"rsync" => array(), // array of directories which have to be synchronized to the server
	"after_deploy" => array("./scripts/migrate && ./scripts/delete_temporary_files dbmole_cache"),
));
$config = $CONFIGS[$stage];
$config += $default_config;
$config["create_maintenance_file"] = String::ToObject($config["create_maintenance_file"])->toBoolean(); // "false" -> false

// converting string into array on the following options
foreach(array("before_deploy","rsync","after_deploy") as $k){
	if(is_string($config[$k])){
		$config[$k] = $config[$k] ? array($config[$k]) : array();
	}
}

!preg_match('/\/$/',$config["directory"]) && ($config["directory"] .= "/"); // "projects/myapp" -> "projects/myapp/"

$raw_def_keys = array_keys($raw_def);
foreach($config as $k => $v){
	if(!in_array($k,$raw_def_keys)){
		echo "in section $stage there is an unknown key \"$k\" (in config/deploy.yml)\n";
		_exit_with_errors();
	}
	// TODO: check mandatory values
	// TODO: check formats of values
}

echo "gonna deploy to $stage\n";
echo miniYAML::Dump(array("$stage" => $config));
sleep(1);

if($cwd!=getcwd()){
	echo "NOTICE: working directory changed to ".getcwd()."\n";
}

$current_branch = trim(_exec("git rev-parse --abbrev-ref HEAD","getting name of the branch you are on"));
echo "$current_branch\n";
if($current_branch=="HEAD"){
	echo "You are not currently on a branch\n";
	_exit_with_errors();
}

$out = _exec("git remote -v","checking out existing remote URLs");
// searching for:
//  production      devel@kajka:apps/phyllostomus.com/repos/production.git (fetch)
//  production      devel@kajka:apps/phyllostomus.com/repos/production.git (push)
preg_match_all("/\\n$stage\\s+([^\\s]+)\\s+/","\n$out",$matches);
if(sizeof($matches[1])==0){
	_exec("git remote add $stage $config[deploy_repository]");
}elseif($matches[1]!=array($config["deploy_repository"],$config["deploy_repository"])){
	echo "Seems that you have remote $stage configured with a different URL.\n";
	echo "It is expected $config[deploy_repository]\n";
	echo "You shall run:\n";
	echo "  $ git remote rm $stage\n";
	echo "  $ git remote add $stage $config[deploy_repository]\n";
	_exit_with_errors();
}

//$config["create_maintenance_file"] && _remote_exec('echo "<'.'?php /* added by scripts/deploy */ define(\"MAINTENANCE\",true);" > config/maintenance.php','gonna create the maintenance file');

_run_commands($config["before_deploy"],"before_deploy");

_create_maintenance_file_if_required(); // we are trying to create the maintenance file as late as possible

_exec("git push $stage $current_branch:$config[deploy_branch]","gonna push to deployment repo");
#echo _remote_exec("git fetch origin master && git reset --hard origin/master","gonna synchronize source code"); # TODO: Tento radek nekde nefunoval podle ocekavani. Byl nahrazem tim nasledujicim. Proc?
echo _remote_exec("git checkout master && git fetch origin && git reset --hard origin/master","gonna synchronize source code");
echo _remote_exec("git submodule init && git submodule update","gonna initialize and update submodules");

foreach($config["rsync"] as $file){
	if(!$file){ continue; } // empty value
	if(is_dir($file)){
		_remote_exec("mkdir -p $file","gonna create directory $file if doesn't exist"); // creates directory when it is missing
		!preg_match('/\/$/',$file) && ($file .= "/"); // "public/dist" -> "public/dist/"
	}
	echo _exec("rsync -av --delete $file $config[user]@$config[server]:$config[directory]/$file","gonna synchronize $file");
}

_run_commands($config["after_deploy"],"after_deploy");

$config["create_maintenance_file"] && _remote_exec("rm config/maintenance.php","gonna remove the maintenance file");

echo "Everything now looks suspiciously good...\n";
exit(0);

// ------------- and now some functions...

function _exec($cmd,$options = array()){
	if(is_string($options)){ $options = array("description" => $options); }
	$options += array(
		"description" => null,
	);
	echo "################\n";
	if($options["description"]){ echo "# $options[description]\n"; }
	echo "$ $cmd\n";
	exec("($cmd) 2>&1",$output,$err); // we need to redirect std error to std output
	if($err){
		echo join("\n",$output),"\n";
		echo "command execution failed ($err), exiting...\n";
		_exit_with_errors();
	}
	$output && ($output[] = "");
	return join("\n",$output);
}

function _remote_exec($cmd,$options = array()){
	global $config;
	$cmd = "ssh $config[user]@$config[server] \"cd $config[directory] && export ATK14_ENV=production && (".strtr($cmd,array('"' => '\"', "\\" => "\\\\")).")\"";
	return _exec($cmd,$options);
}

function _run_commands($commands,$name = "before_deploy"){
	foreach($commands as $cmd){
		$location = "remote";
		if(preg_match($_pattern = '/^@(local|remote)\s/',$cmd,$matches)){
			$location = $matches[1];
			$cmd = preg_replace($_pattern,'',$cmd); // "@local ./composer.phar update" -> "./composer.phar update"
		}
		if($location=="remote"){
			_create_maintenance_file_if_required(); // we are trying to create the maintenance file as late as possible - just before first remote command execution
			echo _remote_exec($cmd,"gonna execute $name command remotely");
		}else{
			echo _exec($cmd,"gonna execute $name command locally");
		}
	}
}

function _create_maintenance_file_if_required(){
	global $config;
	static $already_created = false;

	if($already_created){ return; }

	$config["create_maintenance_file"] && _remote_exec('echo "<'.'?php /* added by scripts/deploy */ define(\"MAINTENANCE\",true);" > config/maintenance.php','gonna create the maintenance file');
	$already_created = true;
}

function _exit_with_errors(){
	echo '
  _____       _  _   _ 
 |  ___|__ _ (_)| | | |
 | |_  / _` || || | | |
 |  _|| (_| || || | |_|
 |_|   \__,_||_||_| (_)
                	
';
	exit(1);
}
