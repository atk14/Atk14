#!/usr/bin/env php
<?php
/**
 * Provides deployment of the application to production
 *
 * For more help run
 *	$ ./scripts/deploy --help
 */

$arguments = getopt("hld",array("help","list","dump","skip-before-deploy"));

if(isset($arguments["h"]) || isset($arguments["help"])){
$script = $argv[0];
echo ltrim("
Provides deployment of the application to production
                                                     
It reads configuration from config/deploy.yml

For displaying this help message run
 $ $script -h
 $ $script --help
                                                     
To deploy on the first stage in config/deploy.yml
 $ $script
                                                     
To deploy on the specific stage
 $ $script preview

To list available stages
 $ $script -l
 $ $script --list

To dump deployment recipes for all stages
 $ $script -d
 $ $script --dump

To dump the deployment recipe for a given stage
 $ $script -d production
 $ $script --dump production

To deploy to the specific stage without executing before_deploy section
 $ $section --skip-before-deploy production
");
exit(0);
}

require_once(dirname(__FILE__)."/load.php");
$cwd = getcwd();
chdir(ATK14_DOCUMENT_ROOT);

$STAGES = Atk14DeploymentStage::GetStages();
$FIRST_STAGE = Atk14DeploymentStage::GetFirstStage();

if(!$STAGES){
	_exit_with_errors(file_exists("./config/deploy.yml") ? "It looks like the file ./config/deploy.yml is corrupted (beware of usage of tabulators)" : "It looks like there is no file ./config/deploy.yml");
}

$stage_explicit = (sizeof($argv)>1 && !preg_match('/^-/',$argv[sizeof($argv)-1])) ? $argv[sizeof($argv)-1] : null; // the last parameter without '-' at the beginning
$stage = isset($stage_explicit) ? $stage_explicit : $FIRST_STAGE->name;

if($stage_explicit && !isset($STAGES[$stage_explicit])){
	_exit_with_errors("sorry, in ./config/deploy.yml I have no information about a stage $stage_explicit");
}

if(!isset($STAGES[$stage])){
	_exit_with_errors("sorry, in ./config/deploy.yml I have no information about a stage $stage");
}

$stage_obj = $STAGES[$stage];

// Listing all stages
if(isset($arguments["l"]) || isset($arguments["list"])){
	foreach($STAGES as $_stage){
		if($stage_explicit && $_stage->name!=$stage_explicit){ continue; }
		echo "$_stage->name\n";
	}
	exit(0);
}

// Dumping a certain stage or all stages
if(isset($arguments["d"]) || isset($arguments["dump"])){
	$dump_data = array();
	foreach($STAGES as $_stage){
		if($stage_explicit && $_stage->name!=$stage_explicit){ continue; }
		$dump_data[$_stage->name] = $_stage->toArray();
	}
	echo miniYAML::Dump($dump_data);
	exit(0);
}

$config = $STAGES[$stage]->toArray();

echo "gonna deploy to $stage\n";
echo miniYAML::Dump(array("$stage" => $config));
sleep(1);

if($cwd!=getcwd()){
	echo "NOTICE: working directory changed to ".getcwd()."\n";
}

$current_branch = trim(_exec("git rev-parse --abbrev-ref HEAD","getting name of the branch you are on"));
echo "$current_branch\n";
if($current_branch=="HEAD"){
	_exit_with_errors("You are not currently on a branch");
}

$out = _exec("git remote -v","checking out existing remote URLs");
// searching for:
//  production      devel@kajka:apps/phyllostomus.com/repos/production.git (fetch)
//  production      devel@kajka:apps/phyllostomus.com/repos/production.git (push)
preg_match_all("/\\n$stage\\s+([^\\s]+)\\s+/","\n$out",$matches);
if(sizeof($matches[1])==0){
	_exec("git remote add $stage $config[deploy_repository]");
}elseif($matches[1]!=array($config["deploy_repository"],$config["deploy_repository"])){
	echo "Seems that you have remote $stage configured with a different URL.\n";
	echo "It's expected $config[deploy_repository]\n";
	echo "and now it is ".$matches[1][0]."\n";
	echo "You may want to run:\n\n";
	echo "  $ git remote rm $stage\n\n";
	echo "and then deploy again...";
	_exit_with_errors();
}

//$config["create_maintenance_file"] && _remote_exec('echo "<'.'?php /* added by scripts/deploy */ define(\"MAINTENANCE\",true);" > config/maintenance.php','gonna create the maintenance file');

if(isset($arguments["skip-before-deploy"])){
	echo "[WARN] Section before_deploy skipped\n";
}else{
	_run_commands($config["before_deploy"],"before_deploy");
}

$current_commit = trim(_exec("git rev-parse --short HEAD",array("quiet" => true)));
$current_commit_remote = trim(_remote_exec("git rev-parse --short HEAD",array("quiet" => true)));

_append_to_remote_log("starting to deploy application from $current_commit_remote to $current_commit");

_create_maintenance_file_if_required(); // we are trying to create the maintenance file as late as possible

_exec("git push $stage $current_branch:$config[deploy_branch]",array(
	"description" => "gonna push to deployment repo",
	"tip_for_repair" =>
		"If it is unable to push some refs, you can inspect git log by typing:\n\n".
		"  $ git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit $current_branch $stage/$config[deploy_branch]\n\n".
		"When someone else did deploy and forgot to push to $current_branch, you can merge the stuff by typing:\n\n".
		"  $ git pull $stage $config[deploy_branch]:$current_branch\n\n".
		"When you are absolutely sure that this is a force deployment, you may wish to execute:\n\n".
		"  $ git push --force $stage $current_branch:$config[deploy_branch]\n\n".
		"... and then deploy again"
));
#echo _remote_exec("git fetch origin master && git reset --hard origin/master","gonna synchronize source code"); # TODO: Tento radek nekde nefunoval podle ocekavani. Byl nahrazem tim nasledujicim. Proc?
echo _remote_exec("git checkout master && git fetch origin && git reset --hard origin/master","gonna synchronize source code");
echo _remote_exec("git submodule init && git submodule update","gonna initialize and update submodules");

foreach($config["rsync"] as $file){
	if(!$file){ continue; } // empty value
	if(is_dir($file)){
		_remote_exec("mkdir -p $file","gonna create directory $file if doesn't exist"); // creates directory when it is missing
		!preg_match('/\/$/',$file) && ($file .= "/"); // "public/dist" -> "public/dist/"
	}
	echo _exec($stage_obj->compileRsyncCommand($file),"gonna synchronize $file");
}

_run_commands($config["after_deploy"],"after_deploy");

$config["create_maintenance_file"] && _remote_exec("rm config/maintenance.php","gonna remove the maintenance file");

_append_to_remote_log("finished application deployment from $current_commit_remote to $current_commit");

echo "Everything now looks suspiciously good in $stage...\n";
exit(0);

// ------------- and now some functions...

function _exec($cmd,$options = array()){
	if(is_string($options)){ $options = array("description" => $options); }
	$options += array(
		"description" => null,
		"tip_for_repair" => "",
		"quiet" => false,
		"exit_on_error" => true,
	);
	if(!$options["quiet"]){
		echo "################\n";
		if($options["description"]){ echo "# $options[description]\n"; }
		echo "$ $cmd\n";
	}
	exec("($cmd) 2>&1",$output,$err); // we need to redirect std error to std output
	if($err){
		echo join("\n",$output),"\n";
		echo "command execution failed ($err), exiting...\n";
		if($options["tip_for_repair"]){
			echo "\n";
			echo $options["tip_for_repair"],"\n";
		}
		if($options["exit_on_error"]){
			_exit_with_errors();
		}
		$output = array();
	}
	$output && ($output[] = "");
	return join("\n",$output);
}

function _remote_exec($cmd,$options = array()){
	global $stage_obj;
	$cmd = $stage_obj->compileRemoteShellCommand($cmd);
	return _exec($cmd,$options);
}

function _run_commands($commands,$name = "before_deploy"){
	foreach($commands as $cmd){
		$location = "remote";
		if(preg_match($_pattern = '/^@(local|remote)\s/',$cmd,$matches)){
			$location = $matches[1];
			$cmd = preg_replace($_pattern,'',$cmd); // "@local ./composer.phar update" -> "./composer.phar update"
		}
		if($location=="remote"){
			_create_maintenance_file_if_required(); // we are trying to create the maintenance file as late as possible - just before first remote command execution
			echo _remote_exec($cmd,"gonna execute $name command remotely");
		}else{
			echo _exec($cmd,"gonna execute $name command locally");
		}
	}
}

function _create_maintenance_file_if_required(){
	global $config;
	static $already_created = false;

	if($already_created){ return; }

	$config["create_maintenance_file"] && _remote_exec('echo "<'.'?php /* added by scripts/deploy */ define(\"MAINTENANCE\",true);" > config/maintenance.php','gonna create the maintenance file');
	$already_created = true;
}

function _append_to_remote_log($message){
	static $username, $hostname, $remote_addr, $remote_host, $first_call = true;

	if($first_call){
		$username = posix_getpwuid(posix_geteuid());
		$username = $username["name"];
		$hostname = gethostname();
		$remote_addr = trim(_remote_exec("./scripts/_shell_remote_addr",array("quiet" => true, "exit_on_error" => false)));
		$remote_host = trim(_remote_exec("./scripts/_shell_remote_host",array("quiet" => true, "exit_on_error" => false)));

		//_remote_exec("mkdir -p log",array("quiet" => true));

		$first_call = false;
	}

	$log = array();
	$log[] = "[".date("Y-m-d H:i:s")."]";
	$log[] = $message;
	$log[] = $username ? "$username@$hostname" : "";
	$log[] = $remote_addr;
	$log[] = $remote_host;

	$log = join(" - ",$log);

	$cmd = 'echo '.escapeshellarg($log).' | tee -a log/deploy.log';
	_remote_exec($cmd,array("quiet" => true));
}

function _exit_with_errors($error_message = ""){
	global $stage;

	if(strlen($error_message)){
		echo $error_message,"\n";
	}

	echo '
  _____       _  _   _ 
 |  ___|____ (_)| | | |
 | |_  / _  || || | | |
 |  _|| (_| || || | |_|
 |_|   \__,_||_||_| (_) (in '.$stage.')
                	
';
	exit(1);
}
