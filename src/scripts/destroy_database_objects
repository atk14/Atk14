#!/usr/bin/env php
<?php
/**
 * Cleares all objects in the database.
 * This script works in DEVELOPMENT or TESTING environment only.
 *
 * For more help run
 *	$ ./scripts/destroy_database_objects --help
 *
 * TODO: purge triggers and procedures
 */

$arguments = getopt("hp",array("help","preview"));
if(isset($arguments["h"]) || isset($arguments["help"])){
$script = $argv[0];
echo ltrim("
Cleares all objects in database.

For displaying this help message run
 $ $script -h

For previewing what it's gonna happen to the database
 $ $script -p
");
exit(0);
}

require_once(dirname(__FILE__)."/load.php");

$previewing = isset($arguments["p"]) || isset($arguments["preview"]);
$dbname = $dbmole->getDatabaseName();
$schema = "public";

if(!$previewing){

	if(PRODUCTION){
		echo "ATTENTION!!! You are on PRODUCTION!\n";
		echo "Shall I wipe out all objects in the database $dbname?\n";
		echo "If you are sure, answer PLEASE_DO_SO > ";
	}else{
		echo "Shall I wipe out all objects in the database $dbname?\n";
		echo "Hit y, if so > ";
	}

	$fh = fopen('php://stdin', 'r');
	$answer = trim(fgets($fh,1024));
	if(
		(!PRODUCTION && $answer!="y") ||
		(PRODUCTION && $answer!="PLEASE_DO_SO")
	){
		echo "Bye, bye\n";
		exit(1);
	}
}

if($previewing){
	echo "-- database $dbname\n";
}

foreach(get_list_of_tables($dbmole,$schema) as $table){
	$q = drop_table_sql($dbmole,$schema,$table);
	if($previewing){
		echo "$q;\n";
		continue;
	}
	$dbmole->doQuery($q);
	echo "table $table dropped\n";
}

foreach(get_list_of_sequencies($dbmole,$schema) as $sequence){
	$q = "DROP SEQUENCE $schema.$sequence CASCADE";
	if($previewing){
		echo "$q;\n";
		continue;
	}
	$dbmole->doQuery($q);
	echo "sequence $sequence dropped\n";
}

if($dbmole->getDatabaseType()=="postgresql"){ // TODO: MySQL
foreach($dbmole->selectIntoArray("
	SELECT proname || '(' || oidvectortypes(proargtypes) || ')'
	FROM pg_proc INNER JOIN pg_namespace ns ON (pg_proc.pronamespace = ns.oid)
	WHERE ns.nspname = '$schema'  order by proname
") as $procedure){
	$q = "DROP FUNCTION $schema.$procedure";
	if($previewing){
		echo "$q;\n";
		continue;
	}
	$dbmole->doQuery($q);
	echo "function $procedure dropped\n";
}
}


if(!$previewing){
$env = strtolower($ATK14_GLOBAL->getEnvironment());
echo "\n";
echo "Database $dbname is now empty. You may want to run:\n";
echo " $ ./scripts/delete_temporary_files\n";
//echo " $ ATK14_ENV=$env ./scripts/initialize_database\n"; // when database is not initialized it will be initialized in ./scripts/migrate
echo " $ ATK14_ENV=$env ./scripts/migrate\n";
}

exit(0);


function get_list_of_tables($dbmole,$schema){
	if($dbmole->getDatabaseType()=="mysql"){
		return $dbmole->selectIntoArray("SHOW TABLES");
	}
	return $dbmole->selectIntoArray("SELECT tablename FROM pg_tables WHERE schemaname='$schema'");
}

function get_list_of_sequencies($dbmole,$schema){
	if(!$dbmole->usesSequencies()){
		return array();
	}
	$dbmole->selectIntoArray("SELECT relname FROM pg_statio_user_sequences");
}

function drop_table_sql($dbmole,$schema,$table){
	if($dbmole->getDatabaseType()=="mysql"){
  	return "DROP TABLE IF EXISTS $table CASCADE";
	}
  return "DROP TABLE IF EXISTS $schema.$table CASCADE";
}
