#!/usr/bin/env php
<?php
/**
 * Cleares all objects in the database.
 * This script works in DEVELOPMENT or TESTING environment only.
 *
 * For more help run
 *	$ ./scripts/destroy_database_objects --help
 *
 * TODO: purge triggers and procedures
 */

$arguments = getopt("hps::",array("help","preview","schema::"));
$arguments += array(
	"h" => null,
	"p" => null,
	"s" => null,
);
$arguments += array(
	"help" => $arguments["h"],
	"preview" => $arguments["p"],
	"schema" => $arguments["s"],
);

if(isset($arguments["help"])){
$script = $argv[0];
echo ltrim("
Cleares all objects in database.

For displaying this help message run
 $ $script -h

For previewing what it's gonna happen to the database
 $ $script -p

To destroy objects in a non-default schema
 $ $script --schema=application
 $ $script -sapplication
");
exit(0);
}

require_once(dirname(__FILE__)."/load.php");

if(PRODUCTION && !ATK14_ENABLE_DESTROY_DATABASE_OBJECTS_IN_PRODUCTION){
	echo "Probably you don't want to perform this action in production\n";
	exit(1);
}

if(strlen($arguments["schema"])){
	try{
		Atk14Migration::SetDatabaseSchema($arguments["schema"],$dbmole);
	}catch(Exception $e){
		echo "Error: ",$e->getMessage(),"\n";
		exit(1);
	}
}

$previewing = isset($arguments["preview"]);
$dbname = $dbmole->getDatabaseName();
$schema = Atk14Migration::GetDatabaseSchema($dbmole);

if(!$previewing){

	if(PRODUCTION){
		echo "ATTENTION!!! You are on PRODUCTION!\n";
		echo "Shall I wipe out all objects in the database $dbname in the schema $schema?\n";
		echo "If you are sure, answer PLEASE_DO_SO > ";
	}else{
		echo "Shall I wipe out all objects in the database $dbname in the schema $schema?\n";
		echo "Hit y, if so > ";
	}

	$fh = fopen('php://stdin', 'r');
	$answer = trim(fgets($fh,1024));
	if(
		(!PRODUCTION && $answer!="y") ||
		(PRODUCTION && $answer!="PLEASE_DO_SO")
	){
		echo "Bye, bye\n";
		exit(1);
	}
}

if($previewing){
	echo "-- database $dbname\n";
}

foreach(get_list_of_tables($dbmole,$schema) as $table){
	$q = drop_table_sql($dbmole,$schema,$table);
	if($previewing){
		echo "$q;\n";
		continue;
	}
	$dbmole->doQuery($q);
	echo "table $table dropped\n";
}

foreach(get_list_of_sequencies($dbmole,$schema) as $sequence){
	$q = "DROP SEQUENCE $schema.$sequence CASCADE";
	if($previewing){
		echo "$q;\n";
		continue;
	}
	$dbmole->doQuery($q);
	echo "sequence $sequence dropped\n";
}

if($dbmole->getDatabaseType()=="postgresql"){ // TODO: MySQL

	foreach($dbmole->selectRows("
		SELECT
			proisagg AS is_aggregate,
			proname || '(' || oidvectortypes(proargtypes) || ')' AS function_name
		FROM pg_proc INNER JOIN pg_namespace ns ON (pg_proc.pronamespace = ns.oid)
		WHERE ns.nspname = '$schema' AND pg_proc.proowner=:userid ORDER BY proname
	",array(":userid" => get_database_userid($dbmole))) as $row){
		$subject = $row["is_aggregate"]=='t' ? "AGGREGATE" : "FUNCTION";
		$q = "DROP $subject $schema.$row[function_name] CASCADE";
		if($previewing){
			echo "$q;\n";
			continue;
		}
		$dbmole->doQuery($q);
		$subject = strtolower($subject);
		echo "$subject $row[function_name] dropped\n";
	}

	foreach($dbmole->selectIntoArray("
		SELECT cfgname from pg_ts_config WHERE cfgnamespace NOT IN
			(SELECT oid FROM pg_namespace WHERE nspname = 'pg_catalog')
		") as $tsc) {
		$dbmole->doquery("DROP TEXT SEARCH CONFIGURATION $tsc CASCADE");
	}

}


if(!$previewing){
$env = strtolower($ATK14_GLOBAL->getEnvironment());
echo "\n";
echo "Database $dbname is now empty. You may want to run:\n";
echo " $ ./scripts/delete_temporary_files\n";
//echo " $ ATK14_ENV=$env ./scripts/initialize_database\n"; // when database is not initialized it will be initialized in ./scripts/migrate
echo " $ ATK14_ENV=$env ./scripts/migrate\n";
}

exit(0);


function get_list_of_tables($dbmole,$schema){
	if($dbmole->getDatabaseType()=="mysql"){
		return $dbmole->selectIntoArray("SHOW TABLES");
	}

	// only owner can drop his tables
	return $dbmole->selectIntoArray("SELECT tablename FROM pg_tables WHERE schemaname=:schema AND tableowner=:tableowner",array(":schema" => $schema, ":tableowner" => get_database_user($dbmole)));
}

function get_list_of_sequencies($dbmole,$schema){
	if(!$dbmole->usesSequencies()){
		return array();
	}

	//return $dbmole->selectIntoArray("SELECT relname FROM pg_statio_user_sequences WHERE schemaname=:schema",array(":schema" => $schema));

	// https://github.com/atk14/Atk14/issues/4
	return $dbmole->selectIntoArray("
		SELECT c.relname
		FROM pg_class c, pg_user u
		WHERE
			c.relowner = u.usesysid AND
			c.relkind = 'S' AND
			u.usename=:owner AND
			relnamespace IN (
				SELECT oid
				FROM pg_namespace
				WHERE
					nspname = :schema
			)
	",array(
		":owner" => get_database_user($dbmole),
		":schema" => $schema,
	));
}

function drop_table_sql($dbmole,$schema,$table){
	if($dbmole->getDatabaseType()=="mysql"){
  	return "DROP TABLE IF EXISTS $table CASCADE";
	}
  return "DROP TABLE IF EXISTS $schema.$table CASCADE";
}

function get_database_user($dbmole){
	return $dbmole->selectString("SELECT user");
}

function get_database_userid($dbmole){
	$user = get_database_user($dbmole);
	return $dbmole->selectString("SELECT usesysid FROM pg_user WHERE usename=:user",array(":user" => $user));
}
